# -*- coding: utf-8 -*-
"""watts_strogatz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rUuQS0h3yXklK2Ang4c6XijgtLXVKwev
"""

import random
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np

def watts_strogatz(n, k, p):
    if k % 2 != 0:
        raise ValueError("k deve ser par.")

    G = nx.Graph()
    G.add_nodes_from(range(n))

    # conexões do anel regular
    for i in range(n):
        for j in range(1, k//2 + 1):
            neighbor = (i + j) % n
            G.add_edge(i, neighbor)

    # redirecionamento com probabilidade p
    for (i, j) in list(G.edges()):
        if random.random() < p:
            G.remove_edge(i, j)

            possible_nodes = [n for n in range(n) if n != i and not G.has_edge(i, n)]
            if possible_nodes:
                new_target = random.choice(possible_nodes)
                G.add_edge(i, new_target)
            else:
                G.add_edge(i, j)

    # visualização do grafo
    nx.draw(
        G,
        with_labels=True,
        node_size=150,
        font_size=8,
        edge_color='black',
        node_color='lightpink'
    )
    plt.title(f"Watts–Strogatz (manual): n={n}, k={k}, p={p}")
    plt.show()

  # metricas
    print("Número de componentes conexas:", nx.number_connected_components(G))
    graus = [g for _, g in G.degree()]
    print(f"Grau médio: {sum(graus) / len(graus):.2f}")
    print(f"Coeficiente de clustering médio: {nx.average_clustering(G):.2f}")
    print(f"Densidade: {nx.density(G):.2f}")
    desvio = np.std([g for n, g in G.degree()])
    print(f"Desvio padrão dos graus: {desvio:.2f}")
    # caminho médio e diâmetro (tratando desconexão)
    if nx.is_connected(G):
        print(f"Caminho médio: {nx.average_shortest_path_length(G):.2f}")
        print(f"Diâmetro: {nx.diameter(G)}")
    else:
        componentes = list(nx.connected_components(G))
        maior_componente = max(componentes, key=len)
        subgrafo = G.subgraph(maior_componente)
        print("Grafo desconexo — analisando maior componente:")
        print(f"Caminho médio: {nx.average_shortest_path_length(subgrafo):.2f}")
        print(f"Diâmetro: {nx.diameter(subgrafo)}")
    # hubs (definido como grau > média + 2 desvios padrão)
    graus_lista = [g for n, g in G.degree()]
    media_grau = np.mean(graus_lista)
    desvio_grau = np.std(graus_lista)
    limite_hub = media_grau + 2 * desvio_grau
    hubs = [n for n, g in G.degree() if g >= limite_hub]
    print(f"Hubs (grau >= {limite_hub:.2f}):", len(hubs))
    # nó com maior grau
    maior_no = max(G.degree, key=lambda x: x[1])
    print(f"Nó com maior grau: {maior_no[0]} (grau {maior_no[1]})")

    # histograma da distribuição de graus
    plt.hist(graus,
         bins='auto',
         color='skyblue',
         edgecolor='black')
    plt.title(f"Distribuição de graus — Watts–Strogatz (n={n}, k={k}, p={p})")
    plt.xlabel("Grau do nó")
    plt.ylabel("Número de nós")
    plt.grid(True)
    plt.show()

    return G

G_ws = watts_strogatz(n=50, k=4, p=0.8)