# -*- coding: utf-8 -*-
"""watts_strogatz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rUuQS0h3yXklK2Ang4c6XijgtLXVKwev
"""

import random
import matplotlib.pyplot as plt
import networkx as nx

def watts_strogatz(n, k, p):
    if k % 2 != 0:
        raise ValueError("k deve ser par.")

    G = nx.Graph()
    G.add_nodes_from(range(n))

    # conexões do anel regular
    for i in range(n):
        for j in range(1, k//2 + 1):
            neighbor = (i + j) % n
            G.add_edge(i, neighbor)

    # redirecionamento com probabilidade p
    for (i, j) in list(G.edges()):
        if random.random() < p:
            G.remove_edge(i, j)

            possible_nodes = [n for n in range(n) if n != i and not G.has_edge(i, n)]
            if possible_nodes:
                new_target = random.choice(possible_nodes)
                G.add_edge(i, new_target)
            else:
                G.add_edge(i, j)

    # visualização do grafo
    nx.draw(
        G,
        with_labels=True,
        node_size=150,
        font_size=8,
        edge_color='black',
        node_color='lightpink'
    )
    plt.title(f"Watts–Strogatz (manual): n={n}, k={k}, p={p}")
    plt.show()

    # métricas da rede
    graus = [grau for _, grau in G.degree()]
    print(f"Número de componentes conexas: {nx.number_connected_components(G)}")
    if nx.is_connected(G):
        print(f"Diâmetro: {nx.diameter(G)}")
        print(f"Caminho médio: {nx.average_shortest_path_length(G):.2f}")
    else:
        print("Atenção: Grafo desconexo – não é possível calcular caminho médio e diâmetro.")

    print(f"Grau médio: {sum(graus)/len(graus):.2f}")
    print(f"Desvio padrão dos graus: {round((sum((x - sum(graus)/len(graus))**2 for x in graus)/len(graus))**0.5, 2)}")
    print(f"Coeficiente de clustering médio: {nx.average_clustering(G):.2f}")
    print(f"Densidade: {nx.density(G):.2f}")

    # histograma da distribuição de graus
    plt.hist(graus, bins=range(min(graus), max(graus)+2), align='left', color='skyblue', edgecolor='black')
    plt.title(f"Distribuição de graus — Watts–Strogatz (n={n}, k={k}, p={p})")
    plt.xlabel("Grau do nó")
    plt.ylabel("Número de nós")
    plt.grid(True)
    plt.show()

    return G

G_ws = watts_strogatz(n=25, k=6, p=0.6)